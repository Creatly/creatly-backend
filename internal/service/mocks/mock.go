// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	domain "github.com/zhashkevych/courses-backend/internal/domain"
	service "github.com/zhashkevych/courses-backend/internal/service"
	payment "github.com/zhashkevych/courses-backend/pkg/payment"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	reflect "reflect"
)

// MockSchools is a mock of Schools interface
type MockSchools struct {
	ctrl     *gomock.Controller
	recorder *MockSchoolsMockRecorder
}

// MockSchoolsMockRecorder is the mock recorder for MockSchools
type MockSchoolsMockRecorder struct {
	mock *MockSchools
}

// NewMockSchools creates a new mock instance
func NewMockSchools(ctrl *gomock.Controller) *MockSchools {
	mock := &MockSchools{ctrl: ctrl}
	mock.recorder = &MockSchoolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSchools) EXPECT() *MockSchoolsMockRecorder {
	return m.recorder
}

// GetByDomain mocks base method
func (m *MockSchools) GetByDomain(ctx context.Context, domainName string) (domain.School, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDomain", ctx, domainName)
	ret0, _ := ret[0].(domain.School)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDomain indicates an expected call of GetByDomain
func (mr *MockSchoolsMockRecorder) GetByDomain(ctx, domainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDomain", reflect.TypeOf((*MockSchools)(nil).GetByDomain), ctx, domainName)
}

// MockStudents is a mock of Students interface
type MockStudents struct {
	ctrl     *gomock.Controller
	recorder *MockStudentsMockRecorder
}

// MockStudentsMockRecorder is the mock recorder for MockStudents
type MockStudentsMockRecorder struct {
	mock *MockStudents
}

// NewMockStudents creates a new mock instance
func NewMockStudents(ctrl *gomock.Controller) *MockStudents {
	mock := &MockStudents{ctrl: ctrl}
	mock.recorder = &MockStudentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStudents) EXPECT() *MockStudentsMockRecorder {
	return m.recorder
}

// SignUp mocks base method
func (m *MockStudents) SignUp(ctx context.Context, input service.StudentSignUpInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp
func (mr *MockStudentsMockRecorder) SignUp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockStudents)(nil).SignUp), ctx, input)
}

// SignIn mocks base method
func (m *MockStudents) SignIn(ctx context.Context, input service.StudentSignInInput) (service.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, input)
	ret0, _ := ret[0].(service.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn
func (mr *MockStudentsMockRecorder) SignIn(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockStudents)(nil).SignIn), ctx, input)
}

// RefreshTokens mocks base method
func (m *MockStudents) RefreshTokens(ctx context.Context, schoolId primitive.ObjectID, refreshToken string) (service.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, schoolId, refreshToken)
	ret0, _ := ret[0].(service.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens
func (mr *MockStudentsMockRecorder) RefreshTokens(ctx, schoolId, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockStudents)(nil).RefreshTokens), ctx, schoolId, refreshToken)
}

// Verify mocks base method
func (m *MockStudents) Verify(ctx context.Context, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify
func (mr *MockStudentsMockRecorder) Verify(ctx, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockStudents)(nil).Verify), ctx, hash)
}

// GetStudentModuleWithLessons mocks base method
func (m *MockStudents) GetStudentModuleWithLessons(ctx context.Context, schoolId, studentId, moduleId primitive.ObjectID) ([]domain.Lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentModuleWithLessons", ctx, schoolId, studentId, moduleId)
	ret0, _ := ret[0].([]domain.Lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentModuleWithLessons indicates an expected call of GetStudentModuleWithLessons
func (mr *MockStudentsMockRecorder) GetStudentModuleWithLessons(ctx, schoolId, studentId, moduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentModuleWithLessons", reflect.TypeOf((*MockStudents)(nil).GetStudentModuleWithLessons), ctx, schoolId, studentId, moduleId)
}

// GiveAccessToModules mocks base method
func (m *MockStudents) GiveAccessToModules(ctx context.Context, studentId primitive.ObjectID, moduleIds []primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveAccessToModules", ctx, studentId, moduleIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// GiveAccessToModules indicates an expected call of GiveAccessToModules
func (mr *MockStudentsMockRecorder) GiveAccessToModules(ctx, studentId, moduleIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveAccessToModules", reflect.TypeOf((*MockStudents)(nil).GiveAccessToModules), ctx, studentId, moduleIds)
}

// GiveAccessToPackages mocks base method
func (m *MockStudents) GiveAccessToPackages(ctx context.Context, studentId primitive.ObjectID, packageIds []primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GiveAccessToPackages", ctx, studentId, packageIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// GiveAccessToPackages indicates an expected call of GiveAccessToPackages
func (mr *MockStudentsMockRecorder) GiveAccessToPackages(ctx, studentId, packageIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GiveAccessToPackages", reflect.TypeOf((*MockStudents)(nil).GiveAccessToPackages), ctx, studentId, packageIds)
}

// MockEmails is a mock of Emails interface
type MockEmails struct {
	ctrl     *gomock.Controller
	recorder *MockEmailsMockRecorder
}

// MockEmailsMockRecorder is the mock recorder for MockEmails
type MockEmailsMockRecorder struct {
	mock *MockEmails
}

// NewMockEmails creates a new mock instance
func NewMockEmails(ctrl *gomock.Controller) *MockEmails {
	mock := &MockEmails{ctrl: ctrl}
	mock.recorder = &MockEmailsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEmails) EXPECT() *MockEmailsMockRecorder {
	return m.recorder
}

// AddToList mocks base method
func (m *MockEmails) AddToList(arg0 service.AddToListInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToList", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToList indicates an expected call of AddToList
func (mr *MockEmailsMockRecorder) AddToList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToList", reflect.TypeOf((*MockEmails)(nil).AddToList), arg0)
}

// MockCourses is a mock of Courses interface
type MockCourses struct {
	ctrl     *gomock.Controller
	recorder *MockCoursesMockRecorder
}

// MockCoursesMockRecorder is the mock recorder for MockCourses
type MockCoursesMockRecorder struct {
	mock *MockCourses
}

// NewMockCourses creates a new mock instance
func NewMockCourses(ctrl *gomock.Controller) *MockCourses {
	mock := &MockCourses{ctrl: ctrl}
	mock.recorder = &MockCoursesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCourses) EXPECT() *MockCoursesMockRecorder {
	return m.recorder
}

// GetCourseModules mocks base method
func (m *MockCourses) GetCourseModules(ctx context.Context, courseId primitive.ObjectID) ([]domain.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourseModules", ctx, courseId)
	ret0, _ := ret[0].([]domain.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourseModules indicates an expected call of GetCourseModules
func (mr *MockCoursesMockRecorder) GetCourseModules(ctx, courseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourseModules", reflect.TypeOf((*MockCourses)(nil).GetCourseModules), ctx, courseId)
}

// GetModule mocks base method
func (m *MockCourses) GetModule(ctx context.Context, moduleId primitive.ObjectID) (domain.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModule", ctx, moduleId)
	ret0, _ := ret[0].(domain.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModule indicates an expected call of GetModule
func (mr *MockCoursesMockRecorder) GetModule(ctx, moduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModule", reflect.TypeOf((*MockCourses)(nil).GetModule), ctx, moduleId)
}

// GetModuleWithContent mocks base method
func (m *MockCourses) GetModuleWithContent(ctx context.Context, moduleId primitive.ObjectID) (domain.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleWithContent", ctx, moduleId)
	ret0, _ := ret[0].(domain.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleWithContent indicates an expected call of GetModuleWithContent
func (mr *MockCoursesMockRecorder) GetModuleWithContent(ctx, moduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleWithContent", reflect.TypeOf((*MockCourses)(nil).GetModuleWithContent), ctx, moduleId)
}

// GetModuleOffers mocks base method
func (m *MockCourses) GetModuleOffers(ctx context.Context, schoolId, moduleId primitive.ObjectID) ([]domain.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleOffers", ctx, schoolId, moduleId)
	ret0, _ := ret[0].([]domain.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModuleOffers indicates an expected call of GetModuleOffers
func (mr *MockCoursesMockRecorder) GetModuleOffers(ctx, schoolId, moduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleOffers", reflect.TypeOf((*MockCourses)(nil).GetModuleOffers), ctx, schoolId, moduleId)
}

// GetPackageOffers mocks base method
func (m *MockCourses) GetPackageOffers(ctx context.Context, schoolId, packageId primitive.ObjectID) ([]domain.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackageOffers", ctx, schoolId, packageId)
	ret0, _ := ret[0].([]domain.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackageOffers indicates an expected call of GetPackageOffers
func (mr *MockCoursesMockRecorder) GetPackageOffers(ctx, schoolId, packageId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackageOffers", reflect.TypeOf((*MockCourses)(nil).GetPackageOffers), ctx, schoolId, packageId)
}

// GetPackagesModules mocks base method
func (m *MockCourses) GetPackagesModules(ctx context.Context, packageIds []primitive.ObjectID) ([]domain.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPackagesModules", ctx, packageIds)
	ret0, _ := ret[0].([]domain.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPackagesModules indicates an expected call of GetPackagesModules
func (mr *MockCoursesMockRecorder) GetPackagesModules(ctx, packageIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPackagesModules", reflect.TypeOf((*MockCourses)(nil).GetPackagesModules), ctx, packageIds)
}

// GetPromocodeByCode mocks base method
func (m *MockCourses) GetPromocodeByCode(ctx context.Context, schoolId primitive.ObjectID, code string) (domain.Promocode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromocodeByCode", ctx, schoolId, code)
	ret0, _ := ret[0].(domain.Promocode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromocodeByCode indicates an expected call of GetPromocodeByCode
func (mr *MockCoursesMockRecorder) GetPromocodeByCode(ctx, schoolId, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromocodeByCode", reflect.TypeOf((*MockCourses)(nil).GetPromocodeByCode), ctx, schoolId, code)
}

// GetPromocodeById mocks base method
func (m *MockCourses) GetPromocodeById(ctx context.Context, id primitive.ObjectID) (domain.Promocode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromocodeById", ctx, id)
	ret0, _ := ret[0].(domain.Promocode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromocodeById indicates an expected call of GetPromocodeById
func (mr *MockCoursesMockRecorder) GetPromocodeById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromocodeById", reflect.TypeOf((*MockCourses)(nil).GetPromocodeById), ctx, id)
}

// GetOfferById mocks base method
func (m *MockCourses) GetOfferById(ctx context.Context, id primitive.ObjectID) (domain.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOfferById", ctx, id)
	ret0, _ := ret[0].(domain.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOfferById indicates an expected call of GetOfferById
func (mr *MockCoursesMockRecorder) GetOfferById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferById", reflect.TypeOf((*MockCourses)(nil).GetOfferById), ctx, id)
}

// MockOrders is a mock of Orders interface
type MockOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersMockRecorder
}

// MockOrdersMockRecorder is the mock recorder for MockOrders
type MockOrdersMockRecorder struct {
	mock *MockOrders
}

// NewMockOrders creates a new mock instance
func NewMockOrders(ctrl *gomock.Controller) *MockOrders {
	mock := &MockOrders{ctrl: ctrl}
	mock.recorder = &MockOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrders) EXPECT() *MockOrdersMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOrders) Create(ctx context.Context, studentId, offerId, promocodeId primitive.ObjectID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, studentId, offerId, promocodeId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockOrdersMockRecorder) Create(ctx, studentId, offerId, promocodeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrders)(nil).Create), ctx, studentId, offerId, promocodeId)
}

// AddTransaction mocks base method
func (m *MockOrders) AddTransaction(ctx context.Context, id primitive.ObjectID, transaction domain.Transaction) (domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", ctx, id, transaction)
	ret0, _ := ret[0].(domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransaction indicates an expected call of AddTransaction
func (mr *MockOrdersMockRecorder) AddTransaction(ctx, id, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockOrders)(nil).AddTransaction), ctx, id, transaction)
}

// MockPayments is a mock of Payments interface
type MockPayments struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentsMockRecorder
}

// MockPaymentsMockRecorder is the mock recorder for MockPayments
type MockPaymentsMockRecorder struct {
	mock *MockPayments
}

// NewMockPayments creates a new mock instance
func NewMockPayments(ctrl *gomock.Controller) *MockPayments {
	mock := &MockPayments{ctrl: ctrl}
	mock.recorder = &MockPaymentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPayments) EXPECT() *MockPaymentsMockRecorder {
	return m.recorder
}

// ProcessTransaction mocks base method
func (m *MockPayments) ProcessTransaction(ctx context.Context, callbackData payment.Callback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransaction", ctx, callbackData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTransaction indicates an expected call of ProcessTransaction
func (mr *MockPaymentsMockRecorder) ProcessTransaction(ctx, callbackData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransaction", reflect.TypeOf((*MockPayments)(nil).ProcessTransaction), ctx, callbackData)
}
